// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("NFTComponent")));
bytes32 constant NFTComponentTableId = _tableId;

library NFTComponent {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.INT64;
    _schema[1] = SchemaType.INT64;
    _schema[2] = SchemaType.INT64;
    _schema[3] = SchemaType.INT64;
    _schema[4] = SchemaType.INT64;
    _schema[5] = SchemaType.INT64;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "hp";
    _fieldNames[1] = "atk";
    _fieldNames[2] = "def";
    _fieldNames[3] = "mp";
    _fieldNames[4] = "dama";
    _fieldNames[5] = "spd";
    return ("NFTComponent", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get hp */
  function getHp(bytes32 key) internal view returns (int64 hp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Get hp (using the specified store) */
  function getHp(IStore _store, bytes32 key) internal view returns (int64 hp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Set hp */
  function setHp(bytes32 key, int64 hp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((hp)));
  }

  /** Set hp (using the specified store) */
  function setHp(IStore _store, bytes32 key, int64 hp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((hp)));
  }

  /** Get atk */
  function getAtk(bytes32 key) internal view returns (int64 atk) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Get atk (using the specified store) */
  function getAtk(IStore _store, bytes32 key) internal view returns (int64 atk) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Set atk */
  function setAtk(bytes32 key, int64 atk) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((atk)));
  }

  /** Set atk (using the specified store) */
  function setAtk(IStore _store, bytes32 key, int64 atk) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((atk)));
  }

  /** Get def */
  function getDef(bytes32 key) internal view returns (int64 def) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Get def (using the specified store) */
  function getDef(IStore _store, bytes32 key) internal view returns (int64 def) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Set def */
  function setDef(bytes32 key, int64 def) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((def)));
  }

  /** Set def (using the specified store) */
  function setDef(IStore _store, bytes32 key, int64 def) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((def)));
  }

  /** Get mp */
  function getMp(bytes32 key) internal view returns (int64 mp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Get mp (using the specified store) */
  function getMp(IStore _store, bytes32 key) internal view returns (int64 mp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Set mp */
  function setMp(bytes32 key, int64 mp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((mp)));
  }

  /** Set mp (using the specified store) */
  function setMp(IStore _store, bytes32 key, int64 mp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((mp)));
  }

  /** Get dama */
  function getDama(bytes32 key) internal view returns (int64 dama) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Get dama (using the specified store) */
  function getDama(IStore _store, bytes32 key) internal view returns (int64 dama) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Set dama */
  function setDama(bytes32 key, int64 dama) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((dama)));
  }

  /** Set dama (using the specified store) */
  function setDama(IStore _store, bytes32 key, int64 dama) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((dama)));
  }

  /** Get spd */
  function getSpd(bytes32 key) internal view returns (int64 spd) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Get spd (using the specified store) */
  function getSpd(IStore _store, bytes32 key) internal view returns (int64 spd) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (int64(uint64(Bytes.slice8(_blob, 0))));
  }

  /** Set spd */
  function setSpd(bytes32 key, int64 spd) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((spd)));
  }

  /** Set spd (using the specified store) */
  function setSpd(IStore _store, bytes32 key, int64 spd) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((spd)));
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (int64 hp, int64 atk, int64 def, int64 mp, int64 dama, int64 spd) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    bytes32 key
  ) internal view returns (int64 hp, int64 atk, int64 def, int64 mp, int64 dama, int64 spd) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 key, int64 hp, int64 atk, int64 def, int64 mp, int64 dama, int64 spd) internal {
    bytes memory _data = encode(hp, atk, def, mp, dama, spd);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, bytes32 key, int64 hp, int64 atk, int64 def, int64 mp, int64 dama, int64 spd) internal {
    bytes memory _data = encode(hp, atk, def, mp, dama, spd);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(
    bytes memory _blob
  ) internal pure returns (int64 hp, int64 atk, int64 def, int64 mp, int64 dama, int64 spd) {
    hp = (int64(uint64(Bytes.slice8(_blob, 0))));

    atk = (int64(uint64(Bytes.slice8(_blob, 8))));

    def = (int64(uint64(Bytes.slice8(_blob, 16))));

    mp = (int64(uint64(Bytes.slice8(_blob, 24))));

    dama = (int64(uint64(Bytes.slice8(_blob, 32))));

    spd = (int64(uint64(Bytes.slice8(_blob, 40))));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    int64 hp,
    int64 atk,
    int64 def,
    int64 mp,
    int64 dama,
    int64 spd
  ) internal view returns (bytes memory) {
    return abi.encodePacked(hp, atk, def, mp, dama, spd);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
