// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("MapComponent")));
bytes32 constant MapComponentTableId = _tableId;

library MapComponent {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.INT256;
    _schema[1] = SchemaType.INT256;
    _schema[2] = SchemaType.INT256;
    _schema[3] = SchemaType.INT256;
    _schema[4] = SchemaType.UINT256;
    _schema[5] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](0);

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "width";
    _fieldNames[1] = "height";
    _fieldNames[2] = "seed";
    _fieldNames[3] = "denom";
    _fieldNames[4] = "precision";
    _fieldNames[5] = "stepLimit";
    return ("MapComponent", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get width */
  function getWidth() internal view returns (int256 width) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get width (using the specified store) */
  function getWidth(IStore _store) internal view returns (int256 width) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set width */
  function setWidth(int256 width) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((width)));
  }

  /** Set width (using the specified store) */
  function setWidth(IStore _store, int256 width) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((width)));
  }

  /** Get height */
  function getHeight() internal view returns (int256 height) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get height (using the specified store) */
  function getHeight(IStore _store) internal view returns (int256 height) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set height */
  function setHeight(int256 height) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((height)));
  }

  /** Set height (using the specified store) */
  function setHeight(IStore _store, int256 height) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((height)));
  }

  /** Get seed */
  function getSeed() internal view returns (int256 seed) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get seed (using the specified store) */
  function getSeed(IStore _store) internal view returns (int256 seed) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set seed */
  function setSeed(int256 seed) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((seed)));
  }

  /** Set seed (using the specified store) */
  function setSeed(IStore _store, int256 seed) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((seed)));
  }

  /** Get denom */
  function getDenom() internal view returns (int256 denom) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Get denom (using the specified store) */
  function getDenom(IStore _store) internal view returns (int256 denom) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (int256(uint256(Bytes.slice32(_blob, 0))));
  }

  /** Set denom */
  function setDenom(int256 denom) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((denom)));
  }

  /** Set denom (using the specified store) */
  function setDenom(IStore _store, int256 denom) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((denom)));
  }

  /** Get precision */
  function getPrecision() internal view returns (uint256 precision) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get precision (using the specified store) */
  function getPrecision(IStore _store) internal view returns (uint256 precision) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set precision */
  function setPrecision(uint256 precision) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((precision)));
  }

  /** Set precision (using the specified store) */
  function setPrecision(IStore _store, uint256 precision) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((precision)));
  }

  /** Get stepLimit */
  function getStepLimit() internal view returns (uint256 stepLimit) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get stepLimit (using the specified store) */
  function getStepLimit(IStore _store) internal view returns (uint256 stepLimit) {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set stepLimit */
  function setStepLimit(uint256 stepLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked((stepLimit)));
  }

  /** Set stepLimit (using the specified store) */
  function setStepLimit(IStore _store, uint256 stepLimit) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked((stepLimit)));
  }

  /** Get the full data */
  function get()
    internal
    view
    returns (int256 width, int256 height, int256 seed, int256 denom, uint256 precision, uint256 stepLimit)
  {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store
  )
    internal
    view
    returns (int256 width, int256 height, int256 seed, int256 denom, uint256 precision, uint256 stepLimit)
  {
    bytes32[] memory _keyTuple = new bytes32[](0);

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(int256 width, int256 height, int256 seed, int256 denom, uint256 precision, uint256 stepLimit) internal {
    bytes memory _data = encode(width, height, seed, denom, precision, stepLimit);

    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    int256 width,
    int256 height,
    int256 seed,
    int256 denom,
    uint256 precision,
    uint256 stepLimit
  ) internal {
    bytes memory _data = encode(width, height, seed, denom, precision, stepLimit);

    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(
    bytes memory _blob
  )
    internal
    pure
    returns (int256 width, int256 height, int256 seed, int256 denom, uint256 precision, uint256 stepLimit)
  {
    width = (int256(uint256(Bytes.slice32(_blob, 0))));

    height = (int256(uint256(Bytes.slice32(_blob, 32))));

    seed = (int256(uint256(Bytes.slice32(_blob, 64))));

    denom = (int256(uint256(Bytes.slice32(_blob, 96))));

    precision = (uint256(Bytes.slice32(_blob, 128)));

    stepLimit = (uint256(Bytes.slice32(_blob, 160)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    int256 width,
    int256 height,
    int256 seed,
    int256 denom,
    uint256 precision,
    uint256 stepLimit
  ) internal view returns (bytes memory) {
    return abi.encodePacked(width, height, seed, denom, precision, stepLimit);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple() internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](0);
  }

  /* Delete all data for given keys */
  function deleteRecord() internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store) internal {
    bytes32[] memory _keyTuple = new bytes32[](0);

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
