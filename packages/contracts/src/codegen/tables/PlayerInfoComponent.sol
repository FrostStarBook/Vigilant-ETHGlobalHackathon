// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { PlayerState } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("PlayerInfoCompon")));
bytes32 constant PlayerInfoComponentTableId = _tableId;

library PlayerInfoComponent {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](4);
    _schema[0] = SchemaType.UINT64;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.UINT8;
    _schema[3] = SchemaType.UINT256;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](4);
    _fieldNames[0] = "exploreBlock";
    _fieldNames[1] = "updateTimestamp";
    _fieldNames[2] = "state";
    _fieldNames[3] = "energy";
    return ("PlayerInfoComponent", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get exploreBlock */
  function getExploreBlock(bytes32 key) internal view returns (uint64 exploreBlock) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint64(Bytes.slice8(_blob, 0)));
  }

  /** Get exploreBlock (using the specified store) */
  function getExploreBlock(IStore _store, bytes32 key) internal view returns (uint64 exploreBlock) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint64(Bytes.slice8(_blob, 0)));
  }

  /** Set exploreBlock */
  function setExploreBlock(bytes32 key, uint64 exploreBlock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((exploreBlock)));
  }

  /** Set exploreBlock (using the specified store) */
  function setExploreBlock(IStore _store, bytes32 key, uint64 exploreBlock) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((exploreBlock)));
  }

  /** Get updateTimestamp */
  function getUpdateTimestamp(bytes32 key) internal view returns (uint256 updateTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get updateTimestamp (using the specified store) */
  function getUpdateTimestamp(IStore _store, bytes32 key) internal view returns (uint256 updateTimestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set updateTimestamp */
  function setUpdateTimestamp(bytes32 key, uint256 updateTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((updateTimestamp)));
  }

  /** Set updateTimestamp (using the specified store) */
  function setUpdateTimestamp(IStore _store, bytes32 key, uint256 updateTimestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((updateTimestamp)));
  }

  /** Get state */
  function getState(bytes32 key) internal view returns (PlayerState state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return PlayerState(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get state (using the specified store) */
  function getState(IStore _store, bytes32 key) internal view returns (PlayerState state) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return PlayerState(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set state */
  function setState(bytes32 key, PlayerState state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(state)));
  }

  /** Set state (using the specified store) */
  function setState(IStore _store, bytes32 key, PlayerState state) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked(uint8(state)));
  }

  /** Get energy */
  function getEnergy(bytes32 key) internal view returns (uint256 energy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get energy (using the specified store) */
  function getEnergy(IStore _store, bytes32 key) internal view returns (uint256 energy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set energy */
  function setEnergy(bytes32 key, uint256 energy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((energy)));
  }

  /** Set energy (using the specified store) */
  function setEnergy(IStore _store, bytes32 key, uint256 energy) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((energy)));
  }

  /** Get the full data */
  function get(
    bytes32 key
  ) internal view returns (uint64 exploreBlock, uint256 updateTimestamp, PlayerState state, uint256 energy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(
    IStore _store,
    bytes32 key
  ) internal view returns (uint64 exploreBlock, uint256 updateTimestamp, PlayerState state, uint256 energy) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 key, uint64 exploreBlock, uint256 updateTimestamp, PlayerState state, uint256 energy) internal {
    bytes memory _data = encode(exploreBlock, updateTimestamp, state, energy);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 key,
    uint64 exploreBlock,
    uint256 updateTimestamp,
    PlayerState state,
    uint256 energy
  ) internal {
    bytes memory _data = encode(exploreBlock, updateTimestamp, state, energy);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(
    bytes memory _blob
  ) internal pure returns (uint64 exploreBlock, uint256 updateTimestamp, PlayerState state, uint256 energy) {
    exploreBlock = (uint64(Bytes.slice8(_blob, 0)));

    updateTimestamp = (uint256(Bytes.slice32(_blob, 8)));

    state = PlayerState(uint8(Bytes.slice1(_blob, 40)));

    energy = (uint256(Bytes.slice32(_blob, 41)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint64 exploreBlock,
    uint256 updateTimestamp,
    PlayerState state,
    uint256 energy
  ) internal view returns (bytes memory) {
    return abi.encodePacked(exploreBlock, updateTimestamp, state, energy);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((key));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}
